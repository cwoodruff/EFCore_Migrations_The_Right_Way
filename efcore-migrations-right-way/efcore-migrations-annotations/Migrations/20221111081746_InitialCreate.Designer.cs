// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using efcore_migrations_annotations.Models;

#nullable disable

namespace efcoremigrationsannotations.Migrations
{
    [DbContext(typeof(ChinookContext))]
    [Migration("20221111081746_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistsId")
                        .HasColumnType("int");

                    b.Property<int>("TracksId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack", "dbo");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)")
                        .HasComment("The name of the album");

                    b.HasKey("Id");

                    b.HasIndex("ArtistForeignKey");

                    b.HasIndex(new[] { "ArtistId" }, "IFK_Artist_Album");

                    b.ToTable("Album", t =>
                        {
                            t.HasComment("Albums in the store");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasComment("The name of the artist");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "I_Artist_Name");

                    b.ToTable("Artist", "dbo", t =>
                        {
                            t.HasComment("Artists in the store");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnOrder(5);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnOrder(6);

                    b.Property<string>("Company")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(4);

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnOrder(8);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnOrder(3)
                        .HasComputedColumnSql("[LastName] + ', ' + [FirstName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnOrder(12);

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnOrder(11);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnOrder(2);

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnOrder(10);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ZipCode")
                        .HasColumnOrder(9);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnOrder(7);

                    b.Property<int?>("SupportRepForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("SupportRepId")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.HasKey("Id");

                    b.HasIndex("SupportRepForeignKey");

                    b.HasIndex(new[] { "SupportRepId" }, "IFK_Employee_Customer");

                    b.ToTable("Customer", "dbo", t =>
                        {
                            t.HasComment("The customers that have purchased tracks in the store.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComputedColumnSql("[LastName] + ', ' + [FirstName]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ZipCode");

                    b.Property<int>("ReportsTo")
                        .HasColumnType("int");

                    b.Property<int?>("ReportsToForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ReportsToForeignKey");

                    b.HasIndex(new[] { "ReportsTo" }, "IFK_Employee_ReportsTo");

                    b.ToTable("Employee", "dbo");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Genre", "dbo", t =>
                        {
                            t.HasComment("The types of musical genres that that tracks can be assigned.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("BillingZipCode");

                    b.Property<string>("BillingState")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("CustomerForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerForeignKey");

                    b.HasIndex(new[] { "CustomerId" }, "IFK_Customer_Invoice");

                    b.ToTable("Invoice", "dbo", t =>
                        {
                            t.HasComment("The customer's invoices.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TrackForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceForeignKey");

                    b.HasIndex("TrackForeignKey");

                    b.HasIndex(new[] { "InvoiceId" }, "IFK_Invoice_InvoiceLine");

                    b.HasIndex(new[] { "TrackId" }, "IFK_Track_InvoiceLine");

                    b.ToTable("InvoiceLine", "dbo", t =>
                        {
                            t.HasComment("The details for the invoices in the store.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("MediaType", "dbo", t =>
                        {
                            t.HasComment("The types of media that customers can purchase music on the store.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "I_Playlist_Name");

                    b.ToTable("Playlist", "dbo", t =>
                        {
                            t.HasComment("The sets of tracks that have been curated for customers to buy.");
                        });
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("Bytes")
                        .HasColumnType("int");

                    b.Property<string>("Composer")
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.Property<int?>("GenreForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("MediaTypeForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Milliseconds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumForeignKey");

                    b.HasIndex("GenreForeignKey");

                    b.HasIndex("MediaTypeForeignKey");

                    b.HasIndex(new[] { "AlbumId" }, "IFK_Album_Track");

                    b.HasIndex(new[] { "GenreId" }, "IFK_Genre_Track");

                    b.HasIndex(new[] { "MediaTypeId" }, "IFK_MediaType_Track");

                    b.ToTable("Track", "dbo", t =>
                        {
                            t.HasComment("The tracks that are in the store to buy.");
                        });
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("efcore_migrations_annotations.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Album", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistForeignKey");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Customer", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Employee", "SupportRep")
                        .WithMany("Customers")
                        .HasForeignKey("SupportRepForeignKey");

                    b.Navigation("SupportRep");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Employee", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsToForeignKey");

                    b.Navigation("ReportsToNavigation");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Invoice", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerForeignKey");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.InvoiceLine", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceForeignKey");

                    b.HasOne("efcore_migrations_annotations.Models.Track", "Track")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("TrackForeignKey");

                    b.Navigation("Invoice");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Track", b =>
                {
                    b.HasOne("efcore_migrations_annotations.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumForeignKey");

                    b.HasOne("efcore_migrations_annotations.Models.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreForeignKey");

                    b.HasOne("efcore_migrations_annotations.Models.MediaType", "MediaType")
                        .WithMany("Tracks")
                        .HasForeignKey("MediaTypeForeignKey");

                    b.Navigation("Album");

                    b.Navigation("Genre");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Employee", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("InverseReportsToNavigation");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Genre", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.MediaType", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("efcore_migrations_annotations.Models.Track", b =>
                {
                    b.Navigation("InvoiceLines");
                });
#pragma warning restore 612, 618
        }
    }
}
